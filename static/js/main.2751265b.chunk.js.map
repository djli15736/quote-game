{"version":3,"sources":["components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/QuoteViewer.tsx","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserList","users","setUsers","items","onChange","newUsers","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","getLocalStorageUsers","rawUsers","localStorage","getItem","JSON","parse","ControlPanel","setQuote","reveal","sourceRevealed","deck","showAddCardModal","useState","Col","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","CardViewer","quote","score","setScore","Body","Title","Text","Quote","Source","type","placeholder","guess","document","getElementById","value","displayScore","innerHTML","alert","AddCardModal","visible","setVisible","addQuote","source","setSource","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","ev","target","Footer","App","QUOTES","activeQuote","setActiveQuote","setDeck","Container","Row","newQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2751265b.chunk.js","sourcesContent":["import EditableDndList, { Task } from \"editable-dnd-list\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[])=>void}): JSX.Element {\r\n    \r\n    function handleChange(newUsers: Task[]): void{\r\n        setUsers(newUsers);\r\n    }\r\n\r\n\r\n    return <EditableDndList items={users} onChange={handleChange} />;\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Quote } from '../interfaces/quote';\r\nimport QUOTES from '../assets/quotes.json';\r\nimport { getRandomElement, shuffle } from '../utilities/data';\r\nimport { UserList } from './UserList';\r\nimport { useState } from 'react';\r\nimport { Task as User } from 'editable-dnd-list';\r\n\r\nexport const LOCAL_STORAGE_USERS = 'quote-game-users';\r\n\r\nexport const INITIAL_USERS: User[] = [\r\n    {id: '1', text: \"Daniel\"},\r\n    {id: '2', text: \"Jim\"},\r\n    {id: '3', text: \"Bob\"},\r\n    {id: '4', text: \"Michael\"},\r\n    {id: '5', text: \"Tony\"}\r\n];\r\n\r\nexport function getLocalStorageUsers(): User[] {\r\n    let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\r\n    if (rawUsers === null){\r\n        return [...INITIAL_USERS]\r\n    } else {\r\n        return JSON.parse(rawUsers);\r\n    }\r\n}\r\n\r\nexport function ControlPanel({setQuote, reveal, sourceRevealed, deck, showAddCardModal}: \r\n    {setQuote: (q: Quote)=>void, reveal: (r: boolean)=> void, sourceRevealed: boolean, \r\n        showAddCardModal: (b:boolean) => void, deck: Quote[]}): JSX.Element {\r\n    \r\n    const [users, setUsers] = useState<User[]>(getLocalStorageUsers);\r\n    \r\n    \r\n    function setRandomCard() {\r\n        reveal(false);\r\n        setQuote(getRandomElement(deck))\r\n    }\r\n    \r\n    function shuffleUsers() {\r\n        let shuffledUsers: User[] = shuffle(users);\r\n        setUsers([...shuffledUsers]);\r\n    }\r\n\r\n    function save(){\r\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\r\n    }\r\n\r\n    function addNewQuote() {\r\n        showAddCardModal(true);\r\n    }\r\n\r\n    return <Col>\r\n    <h1> Control Panel </h1>\r\n    <UserList users={users} setUsers={setUsers}></UserList>\r\n    <Button onClick={setRandomCard} className=\"m-4\">Swap Current Quote</Button>\r\n    <Button onClick={() => reveal(!sourceRevealed)} className=\"m-4\"> Reveal Source </Button>\r\n    <Button onClick={shuffleUsers} className=\"m-4\"> Shuffle Users</Button>\r\n    <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\r\n    <Button onClick={addNewQuote} className=\"m-4\" variant=\"success\">Add New Quote</Button>\r\n\r\n    </Col>\r\n}","//https://stackoverflow.com/a/5915122\r\n\r\nexport function getRandomElement<T>(items: T[]): T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n }\r\n\r\n //https://stackoverflow.com/a/2450976\r\n //Shuffles in-place\r\n\r\n export function shuffle<T>(array: T[]): T[] {\r\n    let currentIndex = array.length,  randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (currentIndex != 0) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n  \r\n    return array;\r\n  }","import { useState } from 'react';\r\nimport { Col, Card as BootstrapCard, Card} from 'react-bootstrap';\r\nimport { idText } from 'typescript';\r\nimport { Quote } from '../interfaces/quote';\r\n\r\nexport function CardViewer({quote, sourceRevealed}: {quote: Quote, sourceRevealed: boolean}): JSX.Element{\r\n    const [score, setScore] = useState(1);\r\n   // const [correct, showCorrect] = useState<boolean>(false);\r\n   // const [incorrect, showIncorrect] = useState<boolean>(false);\r\n\r\n    const scoreIncrease = () => {\r\n        setScore(score + 1);\r\n      };\r\n    \r\n    function submitGuess(){\r\n        let guess = (document.getElementById(\"guess-box\") as HTMLInputElement)?.value;\r\n        let displayScore = document.getElementById(\"scoreboard\");\r\n        if(guess === quote.Source){\r\n            scoreIncrease();\r\n            displayScore!.innerHTML = \"Score: \" + score;\r\n            alert(\"Correct!\");\r\n        }\r\n        else {\r\n            alert(\"Incorrect!\");\r\n        }\r\n    }\r\n\r\n    return <Col>\r\n        <BootstrapCard>\r\n            <BootstrapCard.Body>\r\n                <BootstrapCard.Title>Quote Viewer</BootstrapCard.Title>\r\n                <BootstrapCard.Text>\r\n                    <strong>Current quote:</strong> {quote.Quote}\r\n                </BootstrapCard.Text>\r\n                {sourceRevealed && <BootstrapCard.Text>\r\n                    <strong>Source:</strong> {quote.Source} \r\n                </BootstrapCard.Text>}\r\n            </BootstrapCard.Body>\r\n        </BootstrapCard>\r\n\r\n        <BootstrapCard>\r\n            <BootstrapCard.Body>\r\n            <input id=\"guess-box\" type=\"text\" placeholder = \"Who said it?\"></input>\r\n            <button onClick={submitGuess}>Submit</button>\r\n            <div id=\"scoreboard\">Score: 0</div>\r\n            </BootstrapCard.Body>\r\n        </BootstrapCard>\r\n    </Col>\r\n}","import React, { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Quote } from '../interfaces/quote';\r\n\r\n\r\nexport function AddCardModal({visible, setVisible, addQuote}:\r\n    {visible: boolean, setVisible: (b: boolean)=>void, addQuote: (q: Quote) => void}): JSX.Element {\r\n    const [quote, setQuote] = useState<string>(\"QUOTE TEXT\");\r\n    const [source, setSource] = useState<string>(\"SOURCE TEXT\");\r\n\r\n    function saveQuote(){\r\n        console.log(\"SAVING\", quote, source);\r\n        addQuote({\r\n            ID: Math.random(),\r\n            Kind: \"Custom\",\r\n            Quote: quote,\r\n            Source: source\r\n        });\r\n        setVisible(false);\r\n    }\r\n\r\n    const hide = () => setVisible(false);\r\n    return (\r\n    <Modal show={visible} onHide={hide}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Modal title</Modal.Title>\r\n        </Modal.Header>\r\n    \r\n        <Modal.Body>\r\n        <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.quoteTextArea\">\r\n                <Form.Label>Quote</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3}\r\n                value={quote}\r\n                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setQuote(ev.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.sourceTextArea\">\r\n                <Form.Label>Who said it?</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3}\r\n                value={source}\r\n                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setSource(ev.target.value)}/>\r\n            </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n    \r\n        <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n        <Button variant=\"primary\" onClick={hide}>Save changes</Button>\r\n        </Modal.Footer>\r\n    </Modal> \r\n    )\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport QUOTES from './assets/quotes.json';\nimport { ControlPanel } from './components/ControlPanel';\nimport { CardViewer } from './components/QuoteViewer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport { Quote } from './interfaces/quote';\nimport { AddCardModal } from './components/AddCardModal';\n\nfunction App(): JSX.Element {\n  const [activeQuote, setActiveQuote] = useState<Quote>(QUOTES[0] as Quote);\n  const [sourceRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Quote[]>(QUOTES);\n\n  function addQuote(newQuote: Quote) {\n    setDeck([...deck, newQuote]);\n  }\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <ControlPanel \n        showAddCardModal = {setVisible}\n        setQuote={setActiveQuote} \n        reveal={reveal}\n        deck={deck}\n        sourceRevealed = {sourceRevealed}></ControlPanel>\n        <CardViewer quote={activeQuote} sourceRevealed={sourceRevealed}></CardViewer>\n        <AddCardModal visible={visible} setVisible={setVisible}\n        addQuote={addQuote}></AddCardModal>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}